#!/bin/bash
#
# Utilities for manipulating the cortex network.

CX_META="metadata.yml"
CX_READ="README.md"
CX_DEX="dex"
CX_TEMPLATES="$HOME/repos/github.com/akhambhati/cortex-cli/sample_cortex"
function CX_MODIFIED() {
	echo $(date "+%Y-%m-%dT%H:%M:%S%z")
}

#######################################
# Determine whether currently within cortical network.
#######################################
function cx.isNetwork() {
	if [[ -f "$CX_PATH/$CX_META" ]] && [[ -f "$CX_PATH/$CX_READ" ]] && [[ -d "$CX_PATH/$CX_DEX" ]]; then
		echo true
	else
		echo false
	fi
}

#######################################
# Create a new cortical network.
#######################################
function cx.initNetwork() {
	if [[ "$(cx.isNetwork $CX_PATH)" == "false" ]]; then
		if [[ -d $CX_PATH || $CX_PATH = "" ]]; then
			echo "Cannot create network in: $CX_PATH"
			echo "Please specify a valid path in CX_PATH environment variable."
		else
			mkdir -p "$CX_PATH"	
			cp -R "$CX_TEMPLATES/$CX_READ" $CX_PATH
			cp -R "$CX_TEMPLATES/$CX_META" $CX_PATH
			cp -R "$CX_TEMPLATES/$CX_DEX" $CX_PATH

			# Pre-format the network
			cx.templateFill "$CX_PATH/$CX_META"
		fi
	else
		echo "Network already exists in: $CX_PATH" 
	fi
}

#######################################
# Get list of all nodes in the network.
#######################################
function cx.getNodes(){
	nodes=$(find $CX_PATH/* -maxdepth 1 -type d -printf '%f\n' |
		grep -P "^_[a-zA-Z0-9]" |
		sort)
	echo "${nodes[@]}"
}

#######################################
# Get the Title of the node (first #)
#######################################
function cx.grepTitle() {
	title=$(grep -E '^# ' $1)
	echo "$title" | sed 's/^[^[:alnum:]]*//'
}

#######################################
# Aggregate metadata from all nodes in cortex.
#######################################
function cx.aggMeta(){
	if [ -z "$(ls $CX_PATH/*/$CX_META)" ]; then
		echo ""
	else
		pstring="paste"
		pstring+=" <(echo '$(cx.getNodes)')"
		meta_files=$(find $CX_PATH/*/$CX_META -maxdepth 2 | sort)
		metakeys=(".created" ".modified")
		for key in "${metakeys[@]}"; do
			list=$(yq eval-all -N ${key} ${meta_files})
			pstring+=" <(echo '${list[@]}')"
		done
		list=$(for fn in $(cx.getNodes); do (cat "$CX_PATH/$fn/$CX_READ" | cx.grepTitle | sed "s,\(.*\),[\1](${CX_PATH}\/${fn}),"); done)
		pstring+=" <(echo '${list[@]}')"
		eval "$pstring"
	fi
}

#######################################
# Get requested node.
#######################################
function cx.getNodeID() {
	if [ "$1" = "first" ]; then
		nodes=$(cx.aggMeta | sort -t $'\t' -k 2 | cut -f 1)
		ID=$((echo $nodes) | cut -d ' ' -f 1)
	elif [ "$1" = "last" ]; then
		nodes=$(cx.aggMeta | sort -r -t $'\t' -k 2 | cut -f 1)
		ID=$((echo $nodes) | cut -d ' ' -f 1)
	elif [ "$1" = "prev" ]; then
		nodes=$(cx.aggMeta | sort -r -t $'\t' -k 3 | cut -f 1)
		ID=$((echo $nodes) | cut -d ' ' -f 1)
	elif [ "$1" = "new" ]; then
		nodes=$(cx.getNodes)
		while true; do
			ID=$(cx.genNodeID 4)
			if [[ ! $nodes =~ (^|[[:space:]])"$ID"($|[[:space:]]) ]]; then
				break
			fi
		done
	elif [ "$1" = "random" ]; then
		nodes=$(cx.aggMeta | sort -R -t $'\t' -k 1 | cut -f 1)
		ID=$((echo $nodes) | cut -d ' ' -f 1)
  else
		if [[ -d "$CX_PATH/$1" ]]; then
			ID=$1
		else
			ID=""
		fi
	fi
	echo $ID
}

#######################################
# Generate ai random node identifier
#######################################
function cx.genNodeID(){
	echo "_$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w $1 | head -n 1)"
}

#######################################
# Delete a node within the cortical network.
#######################################
function cx.nodeDel() {
	SEL_NODE=$(cx.getNodeID $1)
	if [[ -z $SEL_NODE ]]; then
		echo "Node ($SEL_NODE) does not exist."
	else
		SEL_NODE_PATH="$CX_PATH/$SEL_NODE"
		echo "Remove Node ($SEL_NODE)?"
		rm -rdI $SEL_NODE_PATH
	fi
}


#######################################
# Edit a node within the cortical network.
#######################################
function cx.nodeEdit() {
	SEL_NODE=$(cx.getNodeID $1)	
	if [[ -z $SEL_NODE ]]; then
		echo "Must specify a valid node ID."	
		return 0
	fi
	SEL_NODE_PATH="$CX_PATH/$SEL_NODE"
	SEL_README="$SEL_NODE_PATH/$CX_READ"
	SEL_META="$SEL_NODE_PATH/$CX_META"
	
	if [[ ! -d "$SEL_NODE_PATH" ]]; then
		cp -r "$CX_TEMPLATES/_0" "$SEL_NODE_PATH"
		cx.templateFill "$SEL_META"
	fi
  if [[ -e $2 ]]; then
	  fn=$(basename $2)	
		text="\\n\\n![${@:3}]($fn)"
	else
		text=${@:2}
	fi
	initial_checksum=$(md5sum -b $SEL_README)
	vim -c "norm GA$(echo -e $text)" \
	  	-c "startinsert" $SEL_README
	modified_checksum=$(md5sum -b $SEL_README)

	if [[ -z $(cat $SEL_README | sed -E 's/(\#)|[[:space:]]//g') ]]; then
		echo "Node ($SEL_NODE) contents are empty."	
		cx.nodeDel $SEL_NODE
	else
		if [ "$initial_checksum" != "$modified_checksum" ]; then
			echo "Node ($SEL_NODE) was updated."
			cx.updateMetadata $SEL_NODE modified $(CX_MODIFIED)
			if [[ -e $2 ]]; then
				cp "$2" "$SEL_NODE_PATH"
			fi
		fi
	fi
}

#######################################
# Populate a template by querying user 
#######################################
function cx.templateFill() {
	# Query user to input text
	for file in "$@"; do
	  tvars=()
		for tvar in $(grep -Eo '\$[a-zA-Z_][a-zA-Z0-9_]*' $file); do
			varname=${tvar//$/}
			tvars+=("$varname")
			tvals=$(echo "${tvar//$/}")
			echo $tvals
			if [[ ! ${!varname} ]]; then	
				read -p "Define $tvar: " ${tvar//$/}
			fi
		done
	
		# Define the Template
		eval "cat <<-EOF > $file
			`cat $file`
		EOF"

		for tvar in ${tvars[@]}; do
			unset $tvar
		done
	done
}

#######################################
# Update metadata.
#######################################
function cx.updateMetadata() {
	MDATE=".$2 = \"$3\""
	yq -i "$MDATE" $CX_PATH/$1/$CX_META
	if [ "$2" == "modified" ]; then
		yq -i "$MDATE" $CX_PATH/$CX_META
	fi
}

#######################################
# Update nodes index based on metadata.
#######################################
function cx.updateDexNodes(){
	dex_fn="$CX_PATH/$CX_DEX/nodes.md"
	echo "|NODE|CREATED|MODIFIED|TITLE|" > $dex_fn
	echo "|----|------------------------|------------------------|------------------------------------------------|" >> $dex_fn
	cx.aggMeta | cut -f "1 2 3 4" | sort -r -t $'\t' -k 1 | sed 's/^/|/' | sed 's/\t/|/g' | sed 's/$/|/' >> $dex_fn
	echo "Updated $dex_fn."

	dex_fn="$CX_PATH/$CX_DEX/changes.md"
	echo "|NODE|CREATED|MODIFIED|TITLE|" > $dex_fn
	echo "|----|------------------------|------------------------|------------------------------------------------|" >> $dex_fn
	cx.aggMeta | cut -f "1 2 3 4" | sort -r -t $'\t' -k 2 | sed 's/^/|/' | sed 's/\t/|/g' | sed 's/$/|/' >> $dex_fn
	echo "Updated $dex_fn."
}
